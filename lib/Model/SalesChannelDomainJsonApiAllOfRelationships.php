<?php
/**
 * SalesChannelDomainJsonApiAllOfRelationships
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\ShopwareAdminApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shopware Admin API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Admin API.  For a better overview, all CRUD-endpoints are hidden by default. If you want to show also CRUD-endpoints add the query parameter `type=jsonapi`.
 *
 * The version of the OpenAPI document: 6.5.8.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\ShopwareAdminApiClient\Model;

use \ArrayAccess;
use \OpenAPI\ShopwareAdminApiClient\ObjectSerializer;

/**
 * SalesChannelDomainJsonApiAllOfRelationships Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\ShopwareAdminApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class SalesChannelDomainJsonApiAllOfRelationships implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SalesChannelDomainJsonApi_allOf_relationships';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sales_channel' => '\OpenAPI\ShopwareAdminApiClient\Model\SalesChannelDomainJsonApiAllOfRelationshipsSalesChannel',
        'language' => '\OpenAPI\ShopwareAdminApiClient\Model\SalesChannelDomainJsonApiAllOfRelationshipsLanguage',
        'currency' => '\OpenAPI\ShopwareAdminApiClient\Model\SalesChannelDomainJsonApiAllOfRelationshipsCurrency',
        'snippet_set' => '\OpenAPI\ShopwareAdminApiClient\Model\SalesChannelDomainJsonApiAllOfRelationshipsSnippetSet',
        'sales_channel_default_hreflang' => '\OpenAPI\ShopwareAdminApiClient\Model\SalesChannelDomainJsonApiAllOfRelationshipsSalesChannelDefaultHreflang',
        'product_exports' => '\OpenAPI\ShopwareAdminApiClient\Model\SalesChannelDomainJsonApiAllOfRelationshipsProductExports'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sales_channel' => null,
        'language' => null,
        'currency' => null,
        'snippet_set' => null,
        'sales_channel_default_hreflang' => null,
        'product_exports' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sales_channel' => 'salesChannel',
        'language' => 'language',
        'currency' => 'currency',
        'snippet_set' => 'snippetSet',
        'sales_channel_default_hreflang' => 'salesChannelDefaultHreflang',
        'product_exports' => 'productExports'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sales_channel' => 'setSalesChannel',
        'language' => 'setLanguage',
        'currency' => 'setCurrency',
        'snippet_set' => 'setSnippetSet',
        'sales_channel_default_hreflang' => 'setSalesChannelDefaultHreflang',
        'product_exports' => 'setProductExports'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sales_channel' => 'getSalesChannel',
        'language' => 'getLanguage',
        'currency' => 'getCurrency',
        'snippet_set' => 'getSnippetSet',
        'sales_channel_default_hreflang' => 'getSalesChannelDefaultHreflang',
        'product_exports' => 'getProductExports'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sales_channel'] = $data['sales_channel'] ?? null;
        $this->container['language'] = $data['language'] ?? null;
        $this->container['currency'] = $data['currency'] ?? null;
        $this->container['snippet_set'] = $data['snippet_set'] ?? null;
        $this->container['sales_channel_default_hreflang'] = $data['sales_channel_default_hreflang'] ?? null;
        $this->container['product_exports'] = $data['product_exports'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sales_channel
     *
     * @return \OpenAPI\ShopwareAdminApiClient\Model\SalesChannelDomainJsonApiAllOfRelationshipsSalesChannel|null
     */
    public function getSalesChannel()
    {
        return $this->container['sales_channel'];
    }

    /**
     * Sets sales_channel
     *
     * @param \OpenAPI\ShopwareAdminApiClient\Model\SalesChannelDomainJsonApiAllOfRelationshipsSalesChannel|null $sales_channel sales_channel
     *
     * @return self
     */
    public function setSalesChannel($sales_channel)
    {
        $this->container['sales_channel'] = $sales_channel;

        return $this;
    }

    /**
     * Gets language
     *
     * @return \OpenAPI\ShopwareAdminApiClient\Model\SalesChannelDomainJsonApiAllOfRelationshipsLanguage|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param \OpenAPI\ShopwareAdminApiClient\Model\SalesChannelDomainJsonApiAllOfRelationshipsLanguage|null $language language
     *
     * @return self
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \OpenAPI\ShopwareAdminApiClient\Model\SalesChannelDomainJsonApiAllOfRelationshipsCurrency|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \OpenAPI\ShopwareAdminApiClient\Model\SalesChannelDomainJsonApiAllOfRelationshipsCurrency|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets snippet_set
     *
     * @return \OpenAPI\ShopwareAdminApiClient\Model\SalesChannelDomainJsonApiAllOfRelationshipsSnippetSet|null
     */
    public function getSnippetSet()
    {
        return $this->container['snippet_set'];
    }

    /**
     * Sets snippet_set
     *
     * @param \OpenAPI\ShopwareAdminApiClient\Model\SalesChannelDomainJsonApiAllOfRelationshipsSnippetSet|null $snippet_set snippet_set
     *
     * @return self
     */
    public function setSnippetSet($snippet_set)
    {
        $this->container['snippet_set'] = $snippet_set;

        return $this;
    }

    /**
     * Gets sales_channel_default_hreflang
     *
     * @return \OpenAPI\ShopwareAdminApiClient\Model\SalesChannelDomainJsonApiAllOfRelationshipsSalesChannelDefaultHreflang|null
     */
    public function getSalesChannelDefaultHreflang()
    {
        return $this->container['sales_channel_default_hreflang'];
    }

    /**
     * Sets sales_channel_default_hreflang
     *
     * @param \OpenAPI\ShopwareAdminApiClient\Model\SalesChannelDomainJsonApiAllOfRelationshipsSalesChannelDefaultHreflang|null $sales_channel_default_hreflang sales_channel_default_hreflang
     *
     * @return self
     */
    public function setSalesChannelDefaultHreflang($sales_channel_default_hreflang)
    {
        $this->container['sales_channel_default_hreflang'] = $sales_channel_default_hreflang;

        return $this;
    }

    /**
     * Gets product_exports
     *
     * @return \OpenAPI\ShopwareAdminApiClient\Model\SalesChannelDomainJsonApiAllOfRelationshipsProductExports|null
     */
    public function getProductExports()
    {
        return $this->container['product_exports'];
    }

    /**
     * Sets product_exports
     *
     * @param \OpenAPI\ShopwareAdminApiClient\Model\SalesChannelDomainJsonApiAllOfRelationshipsProductExports|null $product_exports product_exports
     *
     * @return self
     */
    public function setProductExports($product_exports)
    {
        $this->container['product_exports'] = $product_exports;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


