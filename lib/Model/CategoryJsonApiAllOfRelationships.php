<?php
/**
 * CategoryJsonApiAllOfRelationships
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\ShopwareAdminApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shopware Admin API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Admin API.  For a better overview, all CRUD-endpoints are hidden by default. If you want to show also CRUD-endpoints add the query parameter `type=jsonapi`.
 *
 * The version of the OpenAPI document: 6.5.8.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\ShopwareAdminApiClient\Model;

use \ArrayAccess;
use \OpenAPI\ShopwareAdminApiClient\ObjectSerializer;

/**
 * CategoryJsonApiAllOfRelationships Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\ShopwareAdminApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class CategoryJsonApiAllOfRelationships implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CategoryJsonApi_allOf_relationships';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'parent' => '\OpenAPI\ShopwareAdminApiClient\Model\CategoryJsonApiAllOfRelationshipsParent',
        'children' => '\OpenAPI\ShopwareAdminApiClient\Model\CategoryJsonApiAllOfRelationshipsChildren',
        'media' => '\OpenAPI\ShopwareAdminApiClient\Model\CategoryJsonApiAllOfRelationshipsMedia',
        'products' => '\OpenAPI\ShopwareAdminApiClient\Model\CategoryJsonApiAllOfRelationshipsProducts',
        'nested_products' => '\OpenAPI\ShopwareAdminApiClient\Model\CategoryJsonApiAllOfRelationshipsNestedProducts',
        'tags' => '\OpenAPI\ShopwareAdminApiClient\Model\CategoryJsonApiAllOfRelationshipsTags',
        'cms_page' => '\OpenAPI\ShopwareAdminApiClient\Model\CategoryJsonApiAllOfRelationshipsCmsPage',
        'product_stream' => '\OpenAPI\ShopwareAdminApiClient\Model\CategoryJsonApiAllOfRelationshipsProductStream',
        'navigation_sales_channels' => '\OpenAPI\ShopwareAdminApiClient\Model\CategoryJsonApiAllOfRelationshipsNavigationSalesChannels',
        'footer_sales_channels' => '\OpenAPI\ShopwareAdminApiClient\Model\CategoryJsonApiAllOfRelationshipsFooterSalesChannels',
        'service_sales_channels' => '\OpenAPI\ShopwareAdminApiClient\Model\CategoryJsonApiAllOfRelationshipsServiceSalesChannels',
        'main_categories' => '\OpenAPI\ShopwareAdminApiClient\Model\CategoryJsonApiAllOfRelationshipsMainCategories',
        'seo_urls' => '\OpenAPI\ShopwareAdminApiClient\Model\CategoryJsonApiAllOfRelationshipsSeoUrls'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'parent' => null,
        'children' => null,
        'media' => null,
        'products' => null,
        'nested_products' => null,
        'tags' => null,
        'cms_page' => null,
        'product_stream' => null,
        'navigation_sales_channels' => null,
        'footer_sales_channels' => null,
        'service_sales_channels' => null,
        'main_categories' => null,
        'seo_urls' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'parent' => 'parent',
        'children' => 'children',
        'media' => 'media',
        'products' => 'products',
        'nested_products' => 'nestedProducts',
        'tags' => 'tags',
        'cms_page' => 'cmsPage',
        'product_stream' => 'productStream',
        'navigation_sales_channels' => 'navigationSalesChannels',
        'footer_sales_channels' => 'footerSalesChannels',
        'service_sales_channels' => 'serviceSalesChannels',
        'main_categories' => 'mainCategories',
        'seo_urls' => 'seoUrls'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'parent' => 'setParent',
        'children' => 'setChildren',
        'media' => 'setMedia',
        'products' => 'setProducts',
        'nested_products' => 'setNestedProducts',
        'tags' => 'setTags',
        'cms_page' => 'setCmsPage',
        'product_stream' => 'setProductStream',
        'navigation_sales_channels' => 'setNavigationSalesChannels',
        'footer_sales_channels' => 'setFooterSalesChannels',
        'service_sales_channels' => 'setServiceSalesChannels',
        'main_categories' => 'setMainCategories',
        'seo_urls' => 'setSeoUrls'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'parent' => 'getParent',
        'children' => 'getChildren',
        'media' => 'getMedia',
        'products' => 'getProducts',
        'nested_products' => 'getNestedProducts',
        'tags' => 'getTags',
        'cms_page' => 'getCmsPage',
        'product_stream' => 'getProductStream',
        'navigation_sales_channels' => 'getNavigationSalesChannels',
        'footer_sales_channels' => 'getFooterSalesChannels',
        'service_sales_channels' => 'getServiceSalesChannels',
        'main_categories' => 'getMainCategories',
        'seo_urls' => 'getSeoUrls'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['parent'] = $data['parent'] ?? null;
        $this->container['children'] = $data['children'] ?? null;
        $this->container['media'] = $data['media'] ?? null;
        $this->container['products'] = $data['products'] ?? null;
        $this->container['nested_products'] = $data['nested_products'] ?? null;
        $this->container['tags'] = $data['tags'] ?? null;
        $this->container['cms_page'] = $data['cms_page'] ?? null;
        $this->container['product_stream'] = $data['product_stream'] ?? null;
        $this->container['navigation_sales_channels'] = $data['navigation_sales_channels'] ?? null;
        $this->container['footer_sales_channels'] = $data['footer_sales_channels'] ?? null;
        $this->container['service_sales_channels'] = $data['service_sales_channels'] ?? null;
        $this->container['main_categories'] = $data['main_categories'] ?? null;
        $this->container['seo_urls'] = $data['seo_urls'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets parent
     *
     * @return \OpenAPI\ShopwareAdminApiClient\Model\CategoryJsonApiAllOfRelationshipsParent|null
     */
    public function getParent()
    {
        return $this->container['parent'];
    }

    /**
     * Sets parent
     *
     * @param \OpenAPI\ShopwareAdminApiClient\Model\CategoryJsonApiAllOfRelationshipsParent|null $parent parent
     *
     * @return self
     */
    public function setParent($parent)
    {
        $this->container['parent'] = $parent;

        return $this;
    }

    /**
     * Gets children
     *
     * @return \OpenAPI\ShopwareAdminApiClient\Model\CategoryJsonApiAllOfRelationshipsChildren|null
     */
    public function getChildren()
    {
        return $this->container['children'];
    }

    /**
     * Sets children
     *
     * @param \OpenAPI\ShopwareAdminApiClient\Model\CategoryJsonApiAllOfRelationshipsChildren|null $children children
     *
     * @return self
     */
    public function setChildren($children)
    {
        $this->container['children'] = $children;

        return $this;
    }

    /**
     * Gets media
     *
     * @return \OpenAPI\ShopwareAdminApiClient\Model\CategoryJsonApiAllOfRelationshipsMedia|null
     */
    public function getMedia()
    {
        return $this->container['media'];
    }

    /**
     * Sets media
     *
     * @param \OpenAPI\ShopwareAdminApiClient\Model\CategoryJsonApiAllOfRelationshipsMedia|null $media media
     *
     * @return self
     */
    public function setMedia($media)
    {
        $this->container['media'] = $media;

        return $this;
    }

    /**
     * Gets products
     *
     * @return \OpenAPI\ShopwareAdminApiClient\Model\CategoryJsonApiAllOfRelationshipsProducts|null
     */
    public function getProducts()
    {
        return $this->container['products'];
    }

    /**
     * Sets products
     *
     * @param \OpenAPI\ShopwareAdminApiClient\Model\CategoryJsonApiAllOfRelationshipsProducts|null $products products
     *
     * @return self
     */
    public function setProducts($products)
    {
        $this->container['products'] = $products;

        return $this;
    }

    /**
     * Gets nested_products
     *
     * @return \OpenAPI\ShopwareAdminApiClient\Model\CategoryJsonApiAllOfRelationshipsNestedProducts|null
     */
    public function getNestedProducts()
    {
        return $this->container['nested_products'];
    }

    /**
     * Sets nested_products
     *
     * @param \OpenAPI\ShopwareAdminApiClient\Model\CategoryJsonApiAllOfRelationshipsNestedProducts|null $nested_products nested_products
     *
     * @return self
     */
    public function setNestedProducts($nested_products)
    {
        $this->container['nested_products'] = $nested_products;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \OpenAPI\ShopwareAdminApiClient\Model\CategoryJsonApiAllOfRelationshipsTags|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \OpenAPI\ShopwareAdminApiClient\Model\CategoryJsonApiAllOfRelationshipsTags|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets cms_page
     *
     * @return \OpenAPI\ShopwareAdminApiClient\Model\CategoryJsonApiAllOfRelationshipsCmsPage|null
     */
    public function getCmsPage()
    {
        return $this->container['cms_page'];
    }

    /**
     * Sets cms_page
     *
     * @param \OpenAPI\ShopwareAdminApiClient\Model\CategoryJsonApiAllOfRelationshipsCmsPage|null $cms_page cms_page
     *
     * @return self
     */
    public function setCmsPage($cms_page)
    {
        $this->container['cms_page'] = $cms_page;

        return $this;
    }

    /**
     * Gets product_stream
     *
     * @return \OpenAPI\ShopwareAdminApiClient\Model\CategoryJsonApiAllOfRelationshipsProductStream|null
     */
    public function getProductStream()
    {
        return $this->container['product_stream'];
    }

    /**
     * Sets product_stream
     *
     * @param \OpenAPI\ShopwareAdminApiClient\Model\CategoryJsonApiAllOfRelationshipsProductStream|null $product_stream product_stream
     *
     * @return self
     */
    public function setProductStream($product_stream)
    {
        $this->container['product_stream'] = $product_stream;

        return $this;
    }

    /**
     * Gets navigation_sales_channels
     *
     * @return \OpenAPI\ShopwareAdminApiClient\Model\CategoryJsonApiAllOfRelationshipsNavigationSalesChannels|null
     */
    public function getNavigationSalesChannels()
    {
        return $this->container['navigation_sales_channels'];
    }

    /**
     * Sets navigation_sales_channels
     *
     * @param \OpenAPI\ShopwareAdminApiClient\Model\CategoryJsonApiAllOfRelationshipsNavigationSalesChannels|null $navigation_sales_channels navigation_sales_channels
     *
     * @return self
     */
    public function setNavigationSalesChannels($navigation_sales_channels)
    {
        $this->container['navigation_sales_channels'] = $navigation_sales_channels;

        return $this;
    }

    /**
     * Gets footer_sales_channels
     *
     * @return \OpenAPI\ShopwareAdminApiClient\Model\CategoryJsonApiAllOfRelationshipsFooterSalesChannels|null
     */
    public function getFooterSalesChannels()
    {
        return $this->container['footer_sales_channels'];
    }

    /**
     * Sets footer_sales_channels
     *
     * @param \OpenAPI\ShopwareAdminApiClient\Model\CategoryJsonApiAllOfRelationshipsFooterSalesChannels|null $footer_sales_channels footer_sales_channels
     *
     * @return self
     */
    public function setFooterSalesChannels($footer_sales_channels)
    {
        $this->container['footer_sales_channels'] = $footer_sales_channels;

        return $this;
    }

    /**
     * Gets service_sales_channels
     *
     * @return \OpenAPI\ShopwareAdminApiClient\Model\CategoryJsonApiAllOfRelationshipsServiceSalesChannels|null
     */
    public function getServiceSalesChannels()
    {
        return $this->container['service_sales_channels'];
    }

    /**
     * Sets service_sales_channels
     *
     * @param \OpenAPI\ShopwareAdminApiClient\Model\CategoryJsonApiAllOfRelationshipsServiceSalesChannels|null $service_sales_channels service_sales_channels
     *
     * @return self
     */
    public function setServiceSalesChannels($service_sales_channels)
    {
        $this->container['service_sales_channels'] = $service_sales_channels;

        return $this;
    }

    /**
     * Gets main_categories
     *
     * @return \OpenAPI\ShopwareAdminApiClient\Model\CategoryJsonApiAllOfRelationshipsMainCategories|null
     */
    public function getMainCategories()
    {
        return $this->container['main_categories'];
    }

    /**
     * Sets main_categories
     *
     * @param \OpenAPI\ShopwareAdminApiClient\Model\CategoryJsonApiAllOfRelationshipsMainCategories|null $main_categories main_categories
     *
     * @return self
     */
    public function setMainCategories($main_categories)
    {
        $this->container['main_categories'] = $main_categories;

        return $this;
    }

    /**
     * Gets seo_urls
     *
     * @return \OpenAPI\ShopwareAdminApiClient\Model\CategoryJsonApiAllOfRelationshipsSeoUrls|null
     */
    public function getSeoUrls()
    {
        return $this->container['seo_urls'];
    }

    /**
     * Sets seo_urls
     *
     * @param \OpenAPI\ShopwareAdminApiClient\Model\CategoryJsonApiAllOfRelationshipsSeoUrls|null $seo_urls seo_urls
     *
     * @return self
     */
    public function setSeoUrls($seo_urls)
    {
        $this->container['seo_urls'] = $seo_urls;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


