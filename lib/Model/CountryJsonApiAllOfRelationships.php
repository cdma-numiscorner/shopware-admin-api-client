<?php
/**
 * CountryJsonApiAllOfRelationships
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\ShopwareAdminApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shopware Admin API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Admin API.  For a better overview, all CRUD-endpoints are hidden by default. If you want to show also CRUD-endpoints add the query parameter `type=jsonapi`.
 *
 * The version of the OpenAPI document: 6.5.8.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\ShopwareAdminApiClient\Model;

use \ArrayAccess;
use \OpenAPI\ShopwareAdminApiClient\ObjectSerializer;

/**
 * CountryJsonApiAllOfRelationships Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\ShopwareAdminApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class CountryJsonApiAllOfRelationships implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CountryJsonApi_allOf_relationships';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'states' => '\OpenAPI\ShopwareAdminApiClient\Model\CountryJsonApiAllOfRelationshipsStates',
        'customer_addresses' => '\OpenAPI\ShopwareAdminApiClient\Model\CountryJsonApiAllOfRelationshipsCustomerAddresses',
        'order_addresses' => '\OpenAPI\ShopwareAdminApiClient\Model\CountryJsonApiAllOfRelationshipsOrderAddresses',
        'sales_channel_default_assignments' => '\OpenAPI\ShopwareAdminApiClient\Model\CountryJsonApiAllOfRelationshipsSalesChannelDefaultAssignments',
        'sales_channels' => '\OpenAPI\ShopwareAdminApiClient\Model\CountryJsonApiAllOfRelationshipsSalesChannels',
        'tax_rules' => '\OpenAPI\ShopwareAdminApiClient\Model\CountryJsonApiAllOfRelationshipsTaxRules',
        'currency_country_roundings' => '\OpenAPI\ShopwareAdminApiClient\Model\CountryJsonApiAllOfRelationshipsCurrencyCountryRoundings'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'states' => null,
        'customer_addresses' => null,
        'order_addresses' => null,
        'sales_channel_default_assignments' => null,
        'sales_channels' => null,
        'tax_rules' => null,
        'currency_country_roundings' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'states' => 'states',
        'customer_addresses' => 'customerAddresses',
        'order_addresses' => 'orderAddresses',
        'sales_channel_default_assignments' => 'salesChannelDefaultAssignments',
        'sales_channels' => 'salesChannels',
        'tax_rules' => 'taxRules',
        'currency_country_roundings' => 'currencyCountryRoundings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'states' => 'setStates',
        'customer_addresses' => 'setCustomerAddresses',
        'order_addresses' => 'setOrderAddresses',
        'sales_channel_default_assignments' => 'setSalesChannelDefaultAssignments',
        'sales_channels' => 'setSalesChannels',
        'tax_rules' => 'setTaxRules',
        'currency_country_roundings' => 'setCurrencyCountryRoundings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'states' => 'getStates',
        'customer_addresses' => 'getCustomerAddresses',
        'order_addresses' => 'getOrderAddresses',
        'sales_channel_default_assignments' => 'getSalesChannelDefaultAssignments',
        'sales_channels' => 'getSalesChannels',
        'tax_rules' => 'getTaxRules',
        'currency_country_roundings' => 'getCurrencyCountryRoundings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['states'] = $data['states'] ?? null;
        $this->container['customer_addresses'] = $data['customer_addresses'] ?? null;
        $this->container['order_addresses'] = $data['order_addresses'] ?? null;
        $this->container['sales_channel_default_assignments'] = $data['sales_channel_default_assignments'] ?? null;
        $this->container['sales_channels'] = $data['sales_channels'] ?? null;
        $this->container['tax_rules'] = $data['tax_rules'] ?? null;
        $this->container['currency_country_roundings'] = $data['currency_country_roundings'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets states
     *
     * @return \OpenAPI\ShopwareAdminApiClient\Model\CountryJsonApiAllOfRelationshipsStates|null
     */
    public function getStates()
    {
        return $this->container['states'];
    }

    /**
     * Sets states
     *
     * @param \OpenAPI\ShopwareAdminApiClient\Model\CountryJsonApiAllOfRelationshipsStates|null $states states
     *
     * @return self
     */
    public function setStates($states)
    {
        $this->container['states'] = $states;

        return $this;
    }

    /**
     * Gets customer_addresses
     *
     * @return \OpenAPI\ShopwareAdminApiClient\Model\CountryJsonApiAllOfRelationshipsCustomerAddresses|null
     */
    public function getCustomerAddresses()
    {
        return $this->container['customer_addresses'];
    }

    /**
     * Sets customer_addresses
     *
     * @param \OpenAPI\ShopwareAdminApiClient\Model\CountryJsonApiAllOfRelationshipsCustomerAddresses|null $customer_addresses customer_addresses
     *
     * @return self
     */
    public function setCustomerAddresses($customer_addresses)
    {
        $this->container['customer_addresses'] = $customer_addresses;

        return $this;
    }

    /**
     * Gets order_addresses
     *
     * @return \OpenAPI\ShopwareAdminApiClient\Model\CountryJsonApiAllOfRelationshipsOrderAddresses|null
     */
    public function getOrderAddresses()
    {
        return $this->container['order_addresses'];
    }

    /**
     * Sets order_addresses
     *
     * @param \OpenAPI\ShopwareAdminApiClient\Model\CountryJsonApiAllOfRelationshipsOrderAddresses|null $order_addresses order_addresses
     *
     * @return self
     */
    public function setOrderAddresses($order_addresses)
    {
        $this->container['order_addresses'] = $order_addresses;

        return $this;
    }

    /**
     * Gets sales_channel_default_assignments
     *
     * @return \OpenAPI\ShopwareAdminApiClient\Model\CountryJsonApiAllOfRelationshipsSalesChannelDefaultAssignments|null
     */
    public function getSalesChannelDefaultAssignments()
    {
        return $this->container['sales_channel_default_assignments'];
    }

    /**
     * Sets sales_channel_default_assignments
     *
     * @param \OpenAPI\ShopwareAdminApiClient\Model\CountryJsonApiAllOfRelationshipsSalesChannelDefaultAssignments|null $sales_channel_default_assignments sales_channel_default_assignments
     *
     * @return self
     */
    public function setSalesChannelDefaultAssignments($sales_channel_default_assignments)
    {
        $this->container['sales_channel_default_assignments'] = $sales_channel_default_assignments;

        return $this;
    }

    /**
     * Gets sales_channels
     *
     * @return \OpenAPI\ShopwareAdminApiClient\Model\CountryJsonApiAllOfRelationshipsSalesChannels|null
     */
    public function getSalesChannels()
    {
        return $this->container['sales_channels'];
    }

    /**
     * Sets sales_channels
     *
     * @param \OpenAPI\ShopwareAdminApiClient\Model\CountryJsonApiAllOfRelationshipsSalesChannels|null $sales_channels sales_channels
     *
     * @return self
     */
    public function setSalesChannels($sales_channels)
    {
        $this->container['sales_channels'] = $sales_channels;

        return $this;
    }

    /**
     * Gets tax_rules
     *
     * @return \OpenAPI\ShopwareAdminApiClient\Model\CountryJsonApiAllOfRelationshipsTaxRules|null
     */
    public function getTaxRules()
    {
        return $this->container['tax_rules'];
    }

    /**
     * Sets tax_rules
     *
     * @param \OpenAPI\ShopwareAdminApiClient\Model\CountryJsonApiAllOfRelationshipsTaxRules|null $tax_rules tax_rules
     *
     * @return self
     */
    public function setTaxRules($tax_rules)
    {
        $this->container['tax_rules'] = $tax_rules;

        return $this;
    }

    /**
     * Gets currency_country_roundings
     *
     * @return \OpenAPI\ShopwareAdminApiClient\Model\CountryJsonApiAllOfRelationshipsCurrencyCountryRoundings|null
     */
    public function getCurrencyCountryRoundings()
    {
        return $this->container['currency_country_roundings'];
    }

    /**
     * Sets currency_country_roundings
     *
     * @param \OpenAPI\ShopwareAdminApiClient\Model\CountryJsonApiAllOfRelationshipsCurrencyCountryRoundings|null $currency_country_roundings currency_country_roundings
     *
     * @return self
     */
    public function setCurrencyCountryRoundings($currency_country_roundings)
    {
        $this->container['currency_country_roundings'] = $currency_country_roundings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


