<?php
/**
 * CmsPageJsonApiAllOfRelationships
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\ShopwareAdminApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shopware Admin API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Admin API.  For a better overview, all CRUD-endpoints are hidden by default. If you want to show also CRUD-endpoints add the query parameter `type=jsonapi`.
 *
 * The version of the OpenAPI document: 6.5.8.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\ShopwareAdminApiClient\Model;

use \ArrayAccess;
use \OpenAPI\ShopwareAdminApiClient\ObjectSerializer;

/**
 * CmsPageJsonApiAllOfRelationships Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\ShopwareAdminApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class CmsPageJsonApiAllOfRelationships implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CmsPageJsonApi_allOf_relationships';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sections' => '\OpenAPI\ShopwareAdminApiClient\Model\CmsPageJsonApiAllOfRelationshipsSections',
        'preview_media' => '\OpenAPI\ShopwareAdminApiClient\Model\CmsPageJsonApiAllOfRelationshipsPreviewMedia',
        'categories' => '\OpenAPI\ShopwareAdminApiClient\Model\CmsPageJsonApiAllOfRelationshipsCategories',
        'landing_pages' => '\OpenAPI\ShopwareAdminApiClient\Model\CmsPageJsonApiAllOfRelationshipsLandingPages',
        'home_sales_channels' => '\OpenAPI\ShopwareAdminApiClient\Model\CmsPageJsonApiAllOfRelationshipsHomeSalesChannels',
        'products' => '\OpenAPI\ShopwareAdminApiClient\Model\CmsPageJsonApiAllOfRelationshipsProducts'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sections' => null,
        'preview_media' => null,
        'categories' => null,
        'landing_pages' => null,
        'home_sales_channels' => null,
        'products' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sections' => 'sections',
        'preview_media' => 'previewMedia',
        'categories' => 'categories',
        'landing_pages' => 'landingPages',
        'home_sales_channels' => 'homeSalesChannels',
        'products' => 'products'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sections' => 'setSections',
        'preview_media' => 'setPreviewMedia',
        'categories' => 'setCategories',
        'landing_pages' => 'setLandingPages',
        'home_sales_channels' => 'setHomeSalesChannels',
        'products' => 'setProducts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sections' => 'getSections',
        'preview_media' => 'getPreviewMedia',
        'categories' => 'getCategories',
        'landing_pages' => 'getLandingPages',
        'home_sales_channels' => 'getHomeSalesChannels',
        'products' => 'getProducts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sections'] = $data['sections'] ?? null;
        $this->container['preview_media'] = $data['preview_media'] ?? null;
        $this->container['categories'] = $data['categories'] ?? null;
        $this->container['landing_pages'] = $data['landing_pages'] ?? null;
        $this->container['home_sales_channels'] = $data['home_sales_channels'] ?? null;
        $this->container['products'] = $data['products'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sections
     *
     * @return \OpenAPI\ShopwareAdminApiClient\Model\CmsPageJsonApiAllOfRelationshipsSections|null
     */
    public function getSections()
    {
        return $this->container['sections'];
    }

    /**
     * Sets sections
     *
     * @param \OpenAPI\ShopwareAdminApiClient\Model\CmsPageJsonApiAllOfRelationshipsSections|null $sections sections
     *
     * @return self
     */
    public function setSections($sections)
    {
        $this->container['sections'] = $sections;

        return $this;
    }

    /**
     * Gets preview_media
     *
     * @return \OpenAPI\ShopwareAdminApiClient\Model\CmsPageJsonApiAllOfRelationshipsPreviewMedia|null
     */
    public function getPreviewMedia()
    {
        return $this->container['preview_media'];
    }

    /**
     * Sets preview_media
     *
     * @param \OpenAPI\ShopwareAdminApiClient\Model\CmsPageJsonApiAllOfRelationshipsPreviewMedia|null $preview_media preview_media
     *
     * @return self
     */
    public function setPreviewMedia($preview_media)
    {
        $this->container['preview_media'] = $preview_media;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return \OpenAPI\ShopwareAdminApiClient\Model\CmsPageJsonApiAllOfRelationshipsCategories|null
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param \OpenAPI\ShopwareAdminApiClient\Model\CmsPageJsonApiAllOfRelationshipsCategories|null $categories categories
     *
     * @return self
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets landing_pages
     *
     * @return \OpenAPI\ShopwareAdminApiClient\Model\CmsPageJsonApiAllOfRelationshipsLandingPages|null
     */
    public function getLandingPages()
    {
        return $this->container['landing_pages'];
    }

    /**
     * Sets landing_pages
     *
     * @param \OpenAPI\ShopwareAdminApiClient\Model\CmsPageJsonApiAllOfRelationshipsLandingPages|null $landing_pages landing_pages
     *
     * @return self
     */
    public function setLandingPages($landing_pages)
    {
        $this->container['landing_pages'] = $landing_pages;

        return $this;
    }

    /**
     * Gets home_sales_channels
     *
     * @return \OpenAPI\ShopwareAdminApiClient\Model\CmsPageJsonApiAllOfRelationshipsHomeSalesChannels|null
     */
    public function getHomeSalesChannels()
    {
        return $this->container['home_sales_channels'];
    }

    /**
     * Sets home_sales_channels
     *
     * @param \OpenAPI\ShopwareAdminApiClient\Model\CmsPageJsonApiAllOfRelationshipsHomeSalesChannels|null $home_sales_channels home_sales_channels
     *
     * @return self
     */
    public function setHomeSalesChannels($home_sales_channels)
    {
        $this->container['home_sales_channels'] = $home_sales_channels;

        return $this;
    }

    /**
     * Gets products
     *
     * @return \OpenAPI\ShopwareAdminApiClient\Model\CmsPageJsonApiAllOfRelationshipsProducts|null
     */
    public function getProducts()
    {
        return $this->container['products'];
    }

    /**
     * Sets products
     *
     * @param \OpenAPI\ShopwareAdminApiClient\Model\CmsPageJsonApiAllOfRelationshipsProducts|null $products products
     *
     * @return self
     */
    public function setProducts($products)
    {
        $this->container['products'] = $products;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


