<?php
/**
 * OrderManagementApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\ShopwareAdminApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shopware Admin API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Admin API.  For a better overview, all CRUD-endpoints are hidden by default. If you want to show also CRUD-endpoints add the query parameter `type=jsonapi`.
 *
 * The version of the OpenAPI document: 6.5.8.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\ShopwareAdminApiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\ShopwareAdminApiClient\ApiException;
use OpenAPI\ShopwareAdminApiClient\Configuration;
use OpenAPI\ShopwareAdminApiClient\HeaderSelector;
use OpenAPI\ShopwareAdminApiClient\ObjectSerializer;

/**
 * OrderManagementApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\ShopwareAdminApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrderManagementApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation orderDeliveryStateTransition
     *
     * Transition an order delivery to a new state
     *
     * @param  string $order_delivery_id Identifier of the order delivery. (required)
     * @param  string $transition The &#x60;action_name&#x60; of the &#x60;state_machine_transition&#x60;. For example &#x60;process&#x60; if the order state should change from open to in progress.  Note: If you choose a transition which is not possible, you will get an error that lists possible transition for the actual state. (required)
     * @param  \OpenAPI\ShopwareAdminApiClient\Model\InlineObject278 $inline_object278 inline_object278 (optional)
     *
     * @throws \OpenAPI\ShopwareAdminApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function orderDeliveryStateTransition($order_delivery_id, $transition, $inline_object278 = null)
    {
        $this->orderDeliveryStateTransitionWithHttpInfo($order_delivery_id, $transition, $inline_object278);
    }

    /**
     * Operation orderDeliveryStateTransitionWithHttpInfo
     *
     * Transition an order delivery to a new state
     *
     * @param  string $order_delivery_id Identifier of the order delivery. (required)
     * @param  string $transition The &#x60;action_name&#x60; of the &#x60;state_machine_transition&#x60;. For example &#x60;process&#x60; if the order state should change from open to in progress.  Note: If you choose a transition which is not possible, you will get an error that lists possible transition for the actual state. (required)
     * @param  \OpenAPI\ShopwareAdminApiClient\Model\InlineObject278 $inline_object278 (optional)
     *
     * @throws \OpenAPI\ShopwareAdminApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderDeliveryStateTransitionWithHttpInfo($order_delivery_id, $transition, $inline_object278 = null)
    {
        $request = $this->orderDeliveryStateTransitionRequest($order_delivery_id, $transition, $inline_object278);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation orderDeliveryStateTransitionAsync
     *
     * Transition an order delivery to a new state
     *
     * @param  string $order_delivery_id Identifier of the order delivery. (required)
     * @param  string $transition The &#x60;action_name&#x60; of the &#x60;state_machine_transition&#x60;. For example &#x60;process&#x60; if the order state should change from open to in progress.  Note: If you choose a transition which is not possible, you will get an error that lists possible transition for the actual state. (required)
     * @param  \OpenAPI\ShopwareAdminApiClient\Model\InlineObject278 $inline_object278 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderDeliveryStateTransitionAsync($order_delivery_id, $transition, $inline_object278 = null)
    {
        return $this->orderDeliveryStateTransitionAsyncWithHttpInfo($order_delivery_id, $transition, $inline_object278)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderDeliveryStateTransitionAsyncWithHttpInfo
     *
     * Transition an order delivery to a new state
     *
     * @param  string $order_delivery_id Identifier of the order delivery. (required)
     * @param  string $transition The &#x60;action_name&#x60; of the &#x60;state_machine_transition&#x60;. For example &#x60;process&#x60; if the order state should change from open to in progress.  Note: If you choose a transition which is not possible, you will get an error that lists possible transition for the actual state. (required)
     * @param  \OpenAPI\ShopwareAdminApiClient\Model\InlineObject278 $inline_object278 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderDeliveryStateTransitionAsyncWithHttpInfo($order_delivery_id, $transition, $inline_object278 = null)
    {
        $returnType = '';
        $request = $this->orderDeliveryStateTransitionRequest($order_delivery_id, $transition, $inline_object278);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderDeliveryStateTransition'
     *
     * @param  string $order_delivery_id Identifier of the order delivery. (required)
     * @param  string $transition The &#x60;action_name&#x60; of the &#x60;state_machine_transition&#x60;. For example &#x60;process&#x60; if the order state should change from open to in progress.  Note: If you choose a transition which is not possible, you will get an error that lists possible transition for the actual state. (required)
     * @param  \OpenAPI\ShopwareAdminApiClient\Model\InlineObject278 $inline_object278 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderDeliveryStateTransitionRequest($order_delivery_id, $transition, $inline_object278 = null)
    {
        // verify the required parameter 'order_delivery_id' is set
        if ($order_delivery_id === null || (is_array($order_delivery_id) && count($order_delivery_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_delivery_id when calling orderDeliveryStateTransition'
            );
        }
        if (!preg_match("/^[0-9a-f]{32}$/", $order_delivery_id)) {
            throw new \InvalidArgumentException("invalid value for \"order_delivery_id\" when calling OrderManagementApi.orderDeliveryStateTransition, must conform to the pattern /^[0-9a-f]{32}$/.");
        }

        // verify the required parameter 'transition' is set
        if ($transition === null || (is_array($transition) && count($transition) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transition when calling orderDeliveryStateTransition'
            );
        }

        $resourcePath = '/_action/order_delivery/{orderDeliveryId}/state/{transition}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order_delivery_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderDeliveryId' . '}',
                ObjectSerializer::toPathValue($order_delivery_id),
                $resourcePath
            );
        }
        // path params
        if ($transition !== null) {
            $resourcePath = str_replace(
                '{' . 'transition' . '}',
                ObjectSerializer::toPathValue($transition),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($inline_object278)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($inline_object278));
            } else {
                $httpBody = $inline_object278;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderStateTransition
     *
     * Transition an order to a new state
     *
     * @param  string $order_id Identifier of the order. (required)
     * @param  string $transition The &#x60;action_name&#x60; of the &#x60;state_machine_transition&#x60;. For example &#x60;process&#x60; if the order state should change from open to in progress.  Note: If you choose a transition that is not available, you will get an error that lists possible transitions for the current state. (required)
     * @param  \OpenAPI\ShopwareAdminApiClient\Model\InlineObject273 $inline_object273 inline_object273 (optional)
     *
     * @throws \OpenAPI\ShopwareAdminApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function orderStateTransition($order_id, $transition, $inline_object273 = null)
    {
        $this->orderStateTransitionWithHttpInfo($order_id, $transition, $inline_object273);
    }

    /**
     * Operation orderStateTransitionWithHttpInfo
     *
     * Transition an order to a new state
     *
     * @param  string $order_id Identifier of the order. (required)
     * @param  string $transition The &#x60;action_name&#x60; of the &#x60;state_machine_transition&#x60;. For example &#x60;process&#x60; if the order state should change from open to in progress.  Note: If you choose a transition that is not available, you will get an error that lists possible transitions for the current state. (required)
     * @param  \OpenAPI\ShopwareAdminApiClient\Model\InlineObject273 $inline_object273 (optional)
     *
     * @throws \OpenAPI\ShopwareAdminApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderStateTransitionWithHttpInfo($order_id, $transition, $inline_object273 = null)
    {
        $request = $this->orderStateTransitionRequest($order_id, $transition, $inline_object273);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation orderStateTransitionAsync
     *
     * Transition an order to a new state
     *
     * @param  string $order_id Identifier of the order. (required)
     * @param  string $transition The &#x60;action_name&#x60; of the &#x60;state_machine_transition&#x60;. For example &#x60;process&#x60; if the order state should change from open to in progress.  Note: If you choose a transition that is not available, you will get an error that lists possible transitions for the current state. (required)
     * @param  \OpenAPI\ShopwareAdminApiClient\Model\InlineObject273 $inline_object273 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderStateTransitionAsync($order_id, $transition, $inline_object273 = null)
    {
        return $this->orderStateTransitionAsyncWithHttpInfo($order_id, $transition, $inline_object273)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderStateTransitionAsyncWithHttpInfo
     *
     * Transition an order to a new state
     *
     * @param  string $order_id Identifier of the order. (required)
     * @param  string $transition The &#x60;action_name&#x60; of the &#x60;state_machine_transition&#x60;. For example &#x60;process&#x60; if the order state should change from open to in progress.  Note: If you choose a transition that is not available, you will get an error that lists possible transitions for the current state. (required)
     * @param  \OpenAPI\ShopwareAdminApiClient\Model\InlineObject273 $inline_object273 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderStateTransitionAsyncWithHttpInfo($order_id, $transition, $inline_object273 = null)
    {
        $returnType = '';
        $request = $this->orderStateTransitionRequest($order_id, $transition, $inline_object273);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderStateTransition'
     *
     * @param  string $order_id Identifier of the order. (required)
     * @param  string $transition The &#x60;action_name&#x60; of the &#x60;state_machine_transition&#x60;. For example &#x60;process&#x60; if the order state should change from open to in progress.  Note: If you choose a transition that is not available, you will get an error that lists possible transitions for the current state. (required)
     * @param  \OpenAPI\ShopwareAdminApiClient\Model\InlineObject273 $inline_object273 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderStateTransitionRequest($order_id, $transition, $inline_object273 = null)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling orderStateTransition'
            );
        }
        if (!preg_match("/^[0-9a-f]{32}$/", $order_id)) {
            throw new \InvalidArgumentException("invalid value for \"order_id\" when calling OrderManagementApi.orderStateTransition, must conform to the pattern /^[0-9a-f]{32}$/.");
        }

        // verify the required parameter 'transition' is set
        if ($transition === null || (is_array($transition) && count($transition) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transition when calling orderStateTransition'
            );
        }

        $resourcePath = '/_action/order/{orderId}/state/{transition}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }
        // path params
        if ($transition !== null) {
            $resourcePath = str_replace(
                '{' . 'transition' . '}',
                ObjectSerializer::toPathValue($transition),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($inline_object273)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($inline_object273));
            } else {
                $httpBody = $inline_object273;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderTransactionCaptureRefund
     *
     * Refund an order transaction capture
     *
     * @param  string $refund_id Identifier of the order transaction capture refund. (required)
     *
     * @throws \OpenAPI\ShopwareAdminApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function orderTransactionCaptureRefund($refund_id)
    {
        $this->orderTransactionCaptureRefundWithHttpInfo($refund_id);
    }

    /**
     * Operation orderTransactionCaptureRefundWithHttpInfo
     *
     * Refund an order transaction capture
     *
     * @param  string $refund_id Identifier of the order transaction capture refund. (required)
     *
     * @throws \OpenAPI\ShopwareAdminApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderTransactionCaptureRefundWithHttpInfo($refund_id)
    {
        $request = $this->orderTransactionCaptureRefundRequest($refund_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation orderTransactionCaptureRefundAsync
     *
     * Refund an order transaction capture
     *
     * @param  string $refund_id Identifier of the order transaction capture refund. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderTransactionCaptureRefundAsync($refund_id)
    {
        return $this->orderTransactionCaptureRefundAsyncWithHttpInfo($refund_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderTransactionCaptureRefundAsyncWithHttpInfo
     *
     * Refund an order transaction capture
     *
     * @param  string $refund_id Identifier of the order transaction capture refund. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderTransactionCaptureRefundAsyncWithHttpInfo($refund_id)
    {
        $returnType = '';
        $request = $this->orderTransactionCaptureRefundRequest($refund_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderTransactionCaptureRefund'
     *
     * @param  string $refund_id Identifier of the order transaction capture refund. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderTransactionCaptureRefundRequest($refund_id)
    {
        // verify the required parameter 'refund_id' is set
        if ($refund_id === null || (is_array($refund_id) && count($refund_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $refund_id when calling orderTransactionCaptureRefund'
            );
        }
        if (!preg_match("/^[0-9a-f]{32}$/", $refund_id)) {
            throw new \InvalidArgumentException("invalid value for \"refund_id\" when calling OrderManagementApi.orderTransactionCaptureRefund, must conform to the pattern /^[0-9a-f]{32}$/.");
        }


        $resourcePath = '/_action/order_transaction_capture_refund/{refundId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($refund_id !== null) {
            $resourcePath = str_replace(
                '{' . 'refundId' . '}',
                ObjectSerializer::toPathValue($refund_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderTransactionStateTransition
     *
     * Transition an order transaction to a new state
     *
     * @param  string $order_transaction_id Identifier of the order transaction. (required)
     * @param  string $transition The &#x60;action_name&#x60; of the &#x60;state_machine_transition&#x60;. For example &#x60;process&#x60; if the order state should change from open to in progress.  Note: If you choose a transition that is not available, you will get an error that lists possible transitions for the current state. (required)
     * @param  \OpenAPI\ShopwareAdminApiClient\Model\InlineObject275 $inline_object275 inline_object275 (optional)
     *
     * @throws \OpenAPI\ShopwareAdminApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function orderTransactionStateTransition($order_transaction_id, $transition, $inline_object275 = null)
    {
        $this->orderTransactionStateTransitionWithHttpInfo($order_transaction_id, $transition, $inline_object275);
    }

    /**
     * Operation orderTransactionStateTransitionWithHttpInfo
     *
     * Transition an order transaction to a new state
     *
     * @param  string $order_transaction_id Identifier of the order transaction. (required)
     * @param  string $transition The &#x60;action_name&#x60; of the &#x60;state_machine_transition&#x60;. For example &#x60;process&#x60; if the order state should change from open to in progress.  Note: If you choose a transition that is not available, you will get an error that lists possible transitions for the current state. (required)
     * @param  \OpenAPI\ShopwareAdminApiClient\Model\InlineObject275 $inline_object275 (optional)
     *
     * @throws \OpenAPI\ShopwareAdminApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderTransactionStateTransitionWithHttpInfo($order_transaction_id, $transition, $inline_object275 = null)
    {
        $request = $this->orderTransactionStateTransitionRequest($order_transaction_id, $transition, $inline_object275);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation orderTransactionStateTransitionAsync
     *
     * Transition an order transaction to a new state
     *
     * @param  string $order_transaction_id Identifier of the order transaction. (required)
     * @param  string $transition The &#x60;action_name&#x60; of the &#x60;state_machine_transition&#x60;. For example &#x60;process&#x60; if the order state should change from open to in progress.  Note: If you choose a transition that is not available, you will get an error that lists possible transitions for the current state. (required)
     * @param  \OpenAPI\ShopwareAdminApiClient\Model\InlineObject275 $inline_object275 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderTransactionStateTransitionAsync($order_transaction_id, $transition, $inline_object275 = null)
    {
        return $this->orderTransactionStateTransitionAsyncWithHttpInfo($order_transaction_id, $transition, $inline_object275)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderTransactionStateTransitionAsyncWithHttpInfo
     *
     * Transition an order transaction to a new state
     *
     * @param  string $order_transaction_id Identifier of the order transaction. (required)
     * @param  string $transition The &#x60;action_name&#x60; of the &#x60;state_machine_transition&#x60;. For example &#x60;process&#x60; if the order state should change from open to in progress.  Note: If you choose a transition that is not available, you will get an error that lists possible transitions for the current state. (required)
     * @param  \OpenAPI\ShopwareAdminApiClient\Model\InlineObject275 $inline_object275 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderTransactionStateTransitionAsyncWithHttpInfo($order_transaction_id, $transition, $inline_object275 = null)
    {
        $returnType = '';
        $request = $this->orderTransactionStateTransitionRequest($order_transaction_id, $transition, $inline_object275);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderTransactionStateTransition'
     *
     * @param  string $order_transaction_id Identifier of the order transaction. (required)
     * @param  string $transition The &#x60;action_name&#x60; of the &#x60;state_machine_transition&#x60;. For example &#x60;process&#x60; if the order state should change from open to in progress.  Note: If you choose a transition that is not available, you will get an error that lists possible transitions for the current state. (required)
     * @param  \OpenAPI\ShopwareAdminApiClient\Model\InlineObject275 $inline_object275 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderTransactionStateTransitionRequest($order_transaction_id, $transition, $inline_object275 = null)
    {
        // verify the required parameter 'order_transaction_id' is set
        if ($order_transaction_id === null || (is_array($order_transaction_id) && count($order_transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_transaction_id when calling orderTransactionStateTransition'
            );
        }
        if (!preg_match("/^[0-9a-f]{32}$/", $order_transaction_id)) {
            throw new \InvalidArgumentException("invalid value for \"order_transaction_id\" when calling OrderManagementApi.orderTransactionStateTransition, must conform to the pattern /^[0-9a-f]{32}$/.");
        }

        // verify the required parameter 'transition' is set
        if ($transition === null || (is_array($transition) && count($transition) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transition when calling orderTransactionStateTransition'
            );
        }

        $resourcePath = '/_action/order_transaction/{orderTransactionId}/state/{transition}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order_transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderTransactionId' . '}',
                ObjectSerializer::toPathValue($order_transaction_id),
                $resourcePath
            );
        }
        // path params
        if ($transition !== null) {
            $resourcePath = str_replace(
                '{' . 'transition' . '}',
                ObjectSerializer::toPathValue($transition),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($inline_object275)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($inline_object275));
            } else {
                $httpBody = $inline_object275;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
