<?php
/**
 * DocumentManagementApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\ShopwareAdminApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shopware Admin API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Admin API.  For a better overview, all CRUD-endpoints are hidden by default. If you want to show also CRUD-endpoints add the query parameter `type=jsonapi`.
 *
 * The version of the OpenAPI document: 6.5.8.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\ShopwareAdminApiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\ShopwareAdminApiClient\ApiException;
use OpenAPI\ShopwareAdminApiClient\Configuration;
use OpenAPI\ShopwareAdminApiClient\HeaderSelector;
use OpenAPI\ShopwareAdminApiClient\ObjectSerializer;

/**
 * DocumentManagementApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\ShopwareAdminApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DocumentManagementApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createDocuments
     *
     * Create documents for orders
     *
     * @param  string $document_type_name The type of document to create (required)
     * @param  \OpenAPI\ShopwareAdminApiClient\Model\InlineObject[] $inline_object test (required)
     *
     * @throws \OpenAPI\ShopwareAdminApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createDocuments($document_type_name, $inline_object)
    {
        $this->createDocumentsWithHttpInfo($document_type_name, $inline_object);
    }

    /**
     * Operation createDocumentsWithHttpInfo
     *
     * Create documents for orders
     *
     * @param  string $document_type_name The type of document to create (required)
     * @param  \OpenAPI\ShopwareAdminApiClient\Model\InlineObject[] $inline_object test (required)
     *
     * @throws \OpenAPI\ShopwareAdminApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDocumentsWithHttpInfo($document_type_name, $inline_object)
    {
        $request = $this->createDocumentsRequest($document_type_name, $inline_object);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createDocumentsAsync
     *
     * Create documents for orders
     *
     * @param  string $document_type_name The type of document to create (required)
     * @param  \OpenAPI\ShopwareAdminApiClient\Model\InlineObject[] $inline_object test (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDocumentsAsync($document_type_name, $inline_object)
    {
        return $this->createDocumentsAsyncWithHttpInfo($document_type_name, $inline_object)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDocumentsAsyncWithHttpInfo
     *
     * Create documents for orders
     *
     * @param  string $document_type_name The type of document to create (required)
     * @param  \OpenAPI\ShopwareAdminApiClient\Model\InlineObject[] $inline_object test (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDocumentsAsyncWithHttpInfo($document_type_name, $inline_object)
    {
        $returnType = '';
        $request = $this->createDocumentsRequest($document_type_name, $inline_object);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDocuments'
     *
     * @param  string $document_type_name The type of document to create (required)
     * @param  \OpenAPI\ShopwareAdminApiClient\Model\InlineObject[] $inline_object test (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createDocumentsRequest($document_type_name, $inline_object)
    {
        // verify the required parameter 'document_type_name' is set
        if ($document_type_name === null || (is_array($document_type_name) && count($document_type_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_type_name when calling createDocuments'
            );
        }
        // verify the required parameter 'inline_object' is set
        if ($inline_object === null || (is_array($inline_object) && count($inline_object) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inline_object when calling createDocuments'
            );
        }

        $resourcePath = '/_action/order/document/{documentTypeName}/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($document_type_name !== null) {
            $resourcePath = str_replace(
                '{' . 'documentTypeName' . '}',
                ObjectSerializer::toPathValue($document_type_name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($inline_object)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($inline_object));
            } else {
                $httpBody = $inline_object;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation downloadDocument
     *
     * Download a document
     *
     * @param  string $document_id Identifier of the document to be downloaded. (required)
     * @param  string $deep_link_code A unique hash code which was generated when the document was created. (required)
     * @param  bool $download This parameter controls the &#x60;Content-Disposition&#x60; header. If set to &#x60;true&#x60; the header will be set to &#x60;attachment&#x60; else &#x60;inline&#x60;. (optional, default to false)
     *
     * @throws \OpenAPI\ShopwareAdminApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function downloadDocument($document_id, $deep_link_code, $download = false)
    {
        list($response) = $this->downloadDocumentWithHttpInfo($document_id, $deep_link_code, $download);
        return $response;
    }

    /**
     * Operation downloadDocumentWithHttpInfo
     *
     * Download a document
     *
     * @param  string $document_id Identifier of the document to be downloaded. (required)
     * @param  string $deep_link_code A unique hash code which was generated when the document was created. (required)
     * @param  bool $download This parameter controls the &#x60;Content-Disposition&#x60; header. If set to &#x60;true&#x60; the header will be set to &#x60;attachment&#x60; else &#x60;inline&#x60;. (optional, default to false)
     *
     * @throws \OpenAPI\ShopwareAdminApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadDocumentWithHttpInfo($document_id, $deep_link_code, $download = false)
    {
        $request = $this->downloadDocumentRequest($document_id, $deep_link_code, $download);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation downloadDocumentAsync
     *
     * Download a document
     *
     * @param  string $document_id Identifier of the document to be downloaded. (required)
     * @param  string $deep_link_code A unique hash code which was generated when the document was created. (required)
     * @param  bool $download This parameter controls the &#x60;Content-Disposition&#x60; header. If set to &#x60;true&#x60; the header will be set to &#x60;attachment&#x60; else &#x60;inline&#x60;. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadDocumentAsync($document_id, $deep_link_code, $download = false)
    {
        return $this->downloadDocumentAsyncWithHttpInfo($document_id, $deep_link_code, $download)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadDocumentAsyncWithHttpInfo
     *
     * Download a document
     *
     * @param  string $document_id Identifier of the document to be downloaded. (required)
     * @param  string $deep_link_code A unique hash code which was generated when the document was created. (required)
     * @param  bool $download This parameter controls the &#x60;Content-Disposition&#x60; header. If set to &#x60;true&#x60; the header will be set to &#x60;attachment&#x60; else &#x60;inline&#x60;. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadDocumentAsyncWithHttpInfo($document_id, $deep_link_code, $download = false)
    {
        $returnType = '\SplFileObject';
        $request = $this->downloadDocumentRequest($document_id, $deep_link_code, $download);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'downloadDocument'
     *
     * @param  string $document_id Identifier of the document to be downloaded. (required)
     * @param  string $deep_link_code A unique hash code which was generated when the document was created. (required)
     * @param  bool $download This parameter controls the &#x60;Content-Disposition&#x60; header. If set to &#x60;true&#x60; the header will be set to &#x60;attachment&#x60; else &#x60;inline&#x60;. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function downloadDocumentRequest($document_id, $deep_link_code, $download = false)
    {
        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling downloadDocument'
            );
        }
        if (!preg_match("/^[0-9a-f]{32}$/", $document_id)) {
            throw new \InvalidArgumentException("invalid value for \"document_id\" when calling DocumentManagementApi.downloadDocument, must conform to the pattern /^[0-9a-f]{32}$/.");
        }

        // verify the required parameter 'deep_link_code' is set
        if ($deep_link_code === null || (is_array($deep_link_code) && count($deep_link_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deep_link_code when calling downloadDocument'
            );
        }

        $resourcePath = '/_action/document/{documentId}/{deepLinkCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($download !== null) {
            if('form' === 'form' && is_array($download)) {
                foreach($download as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['download'] = $download;
            }
        }


        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'documentId' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }
        // path params
        if ($deep_link_code !== null) {
            $resourcePath = str_replace(
                '{' . 'deepLinkCode' . '}',
                ObjectSerializer::toPathValue($deep_link_code),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation downloadDocuments
     *
     * Download a documents
     *
     * @param  string[] $request_body documentIds (optional)
     *
     * @throws \OpenAPI\ShopwareAdminApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function downloadDocuments($request_body = null)
    {
        list($response) = $this->downloadDocumentsWithHttpInfo($request_body);
        return $response;
    }

    /**
     * Operation downloadDocumentsWithHttpInfo
     *
     * Download a documents
     *
     * @param  string[] $request_body documentIds (optional)
     *
     * @throws \OpenAPI\ShopwareAdminApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadDocumentsWithHttpInfo($request_body = null)
    {
        $request = $this->downloadDocumentsRequest($request_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation downloadDocumentsAsync
     *
     * Download a documents
     *
     * @param  string[] $request_body documentIds (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadDocumentsAsync($request_body = null)
    {
        return $this->downloadDocumentsAsyncWithHttpInfo($request_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadDocumentsAsyncWithHttpInfo
     *
     * Download a documents
     *
     * @param  string[] $request_body documentIds (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadDocumentsAsyncWithHttpInfo($request_body = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->downloadDocumentsRequest($request_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'downloadDocuments'
     *
     * @param  string[] $request_body documentIds (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function downloadDocumentsRequest($request_body = null)
    {

        $resourcePath = '/_action/order/document/download';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($request_body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($request_body));
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation numberRangeReserve
     *
     * Reserve or preview a document number
     *
     * @param  string $type &#x60;technicalName&#x60; of the document type (e.g. &#x60;document_invoice&#x60;). Available types can be fetched with the &#x60;/api/document-type endpoint&#x60;. (required)
     * @param  string $saleschannel Sales channel for the number range. Number ranges can be defined per sales channel, so you can pass a sales channel ID here. (required)
     * @param  bool $preview If this parameter has a true value, the number will not actually be incremented, but only previewed. (optional)
     *
     * @throws \OpenAPI\ShopwareAdminApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\ShopwareAdminApiClient\Model\InlineResponse2008
     */
    public function numberRangeReserve($type, $saleschannel, $preview = null)
    {
        list($response) = $this->numberRangeReserveWithHttpInfo($type, $saleschannel, $preview);
        return $response;
    }

    /**
     * Operation numberRangeReserveWithHttpInfo
     *
     * Reserve or preview a document number
     *
     * @param  string $type &#x60;technicalName&#x60; of the document type (e.g. &#x60;document_invoice&#x60;). Available types can be fetched with the &#x60;/api/document-type endpoint&#x60;. (required)
     * @param  string $saleschannel Sales channel for the number range. Number ranges can be defined per sales channel, so you can pass a sales channel ID here. (required)
     * @param  bool $preview If this parameter has a true value, the number will not actually be incremented, but only previewed. (optional)
     *
     * @throws \OpenAPI\ShopwareAdminApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\ShopwareAdminApiClient\Model\InlineResponse2008, HTTP status code, HTTP response headers (array of strings)
     */
    public function numberRangeReserveWithHttpInfo($type, $saleschannel, $preview = null)
    {
        $request = $this->numberRangeReserveRequest($type, $saleschannel, $preview);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\ShopwareAdminApiClient\Model\InlineResponse2008' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\ShopwareAdminApiClient\Model\InlineResponse2008', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\ShopwareAdminApiClient\Model\InlineResponse2008';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\ShopwareAdminApiClient\Model\InlineResponse2008',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation numberRangeReserveAsync
     *
     * Reserve or preview a document number
     *
     * @param  string $type &#x60;technicalName&#x60; of the document type (e.g. &#x60;document_invoice&#x60;). Available types can be fetched with the &#x60;/api/document-type endpoint&#x60;. (required)
     * @param  string $saleschannel Sales channel for the number range. Number ranges can be defined per sales channel, so you can pass a sales channel ID here. (required)
     * @param  bool $preview If this parameter has a true value, the number will not actually be incremented, but only previewed. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function numberRangeReserveAsync($type, $saleschannel, $preview = null)
    {
        return $this->numberRangeReserveAsyncWithHttpInfo($type, $saleschannel, $preview)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation numberRangeReserveAsyncWithHttpInfo
     *
     * Reserve or preview a document number
     *
     * @param  string $type &#x60;technicalName&#x60; of the document type (e.g. &#x60;document_invoice&#x60;). Available types can be fetched with the &#x60;/api/document-type endpoint&#x60;. (required)
     * @param  string $saleschannel Sales channel for the number range. Number ranges can be defined per sales channel, so you can pass a sales channel ID here. (required)
     * @param  bool $preview If this parameter has a true value, the number will not actually be incremented, but only previewed. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function numberRangeReserveAsyncWithHttpInfo($type, $saleschannel, $preview = null)
    {
        $returnType = '\OpenAPI\ShopwareAdminApiClient\Model\InlineResponse2008';
        $request = $this->numberRangeReserveRequest($type, $saleschannel, $preview);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'numberRangeReserve'
     *
     * @param  string $type &#x60;technicalName&#x60; of the document type (e.g. &#x60;document_invoice&#x60;). Available types can be fetched with the &#x60;/api/document-type endpoint&#x60;. (required)
     * @param  string $saleschannel Sales channel for the number range. Number ranges can be defined per sales channel, so you can pass a sales channel ID here. (required)
     * @param  bool $preview If this parameter has a true value, the number will not actually be incremented, but only previewed. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function numberRangeReserveRequest($type, $saleschannel, $preview = null)
    {
        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling numberRangeReserve'
            );
        }
        // verify the required parameter 'saleschannel' is set
        if ($saleschannel === null || (is_array($saleschannel) && count($saleschannel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $saleschannel when calling numberRangeReserve'
            );
        }

        $resourcePath = '/_action/number-range/reserve/{type}/{saleschannel}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($preview !== null) {
            if('form' === 'form' && is_array($preview)) {
                foreach($preview as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['preview'] = $preview;
            }
        }


        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                '{' . 'type' . '}',
                ObjectSerializer::toPathValue($type),
                $resourcePath
            );
        }
        // path params
        if ($saleschannel !== null) {
            $resourcePath = str_replace(
                '{' . 'saleschannel' . '}',
                ObjectSerializer::toPathValue($saleschannel),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uploadToDocument
     *
     * Upload a file for a document
     *
     * @param  string $document_id Identifier of the document the new file should be added to. (required)
     * @param  string $file_name Name of the uploaded file. (required)
     * @param  string $extension Extension of the uploaded file. For example &#x60;pdf&#x60; (required)
     * @param  \SplFileObject $body body (optional)
     *
     * @throws \OpenAPI\ShopwareAdminApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\ShopwareAdminApiClient\Model\InlineResponse2005
     */
    public function uploadToDocument($document_id, $file_name, $extension, $body = null)
    {
        list($response) = $this->uploadToDocumentWithHttpInfo($document_id, $file_name, $extension, $body);
        return $response;
    }

    /**
     * Operation uploadToDocumentWithHttpInfo
     *
     * Upload a file for a document
     *
     * @param  string $document_id Identifier of the document the new file should be added to. (required)
     * @param  string $file_name Name of the uploaded file. (required)
     * @param  string $extension Extension of the uploaded file. For example &#x60;pdf&#x60; (required)
     * @param  \SplFileObject $body (optional)
     *
     * @throws \OpenAPI\ShopwareAdminApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\ShopwareAdminApiClient\Model\InlineResponse2005, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadToDocumentWithHttpInfo($document_id, $file_name, $extension, $body = null)
    {
        $request = $this->uploadToDocumentRequest($document_id, $file_name, $extension, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\ShopwareAdminApiClient\Model\InlineResponse2005' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\ShopwareAdminApiClient\Model\InlineResponse2005', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\ShopwareAdminApiClient\Model\InlineResponse2005';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\ShopwareAdminApiClient\Model\InlineResponse2005',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation uploadToDocumentAsync
     *
     * Upload a file for a document
     *
     * @param  string $document_id Identifier of the document the new file should be added to. (required)
     * @param  string $file_name Name of the uploaded file. (required)
     * @param  string $extension Extension of the uploaded file. For example &#x60;pdf&#x60; (required)
     * @param  \SplFileObject $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadToDocumentAsync($document_id, $file_name, $extension, $body = null)
    {
        return $this->uploadToDocumentAsyncWithHttpInfo($document_id, $file_name, $extension, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadToDocumentAsyncWithHttpInfo
     *
     * Upload a file for a document
     *
     * @param  string $document_id Identifier of the document the new file should be added to. (required)
     * @param  string $file_name Name of the uploaded file. (required)
     * @param  string $extension Extension of the uploaded file. For example &#x60;pdf&#x60; (required)
     * @param  \SplFileObject $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadToDocumentAsyncWithHttpInfo($document_id, $file_name, $extension, $body = null)
    {
        $returnType = '\OpenAPI\ShopwareAdminApiClient\Model\InlineResponse2005';
        $request = $this->uploadToDocumentRequest($document_id, $file_name, $extension, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uploadToDocument'
     *
     * @param  string $document_id Identifier of the document the new file should be added to. (required)
     * @param  string $file_name Name of the uploaded file. (required)
     * @param  string $extension Extension of the uploaded file. For example &#x60;pdf&#x60; (required)
     * @param  \SplFileObject $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function uploadToDocumentRequest($document_id, $file_name, $extension, $body = null)
    {
        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling uploadToDocument'
            );
        }
        if (!preg_match("/^[0-9a-f]{32}$/", $document_id)) {
            throw new \InvalidArgumentException("invalid value for \"document_id\" when calling DocumentManagementApi.uploadToDocument, must conform to the pattern /^[0-9a-f]{32}$/.");
        }

        // verify the required parameter 'file_name' is set
        if ($file_name === null || (is_array($file_name) && count($file_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_name when calling uploadToDocument'
            );
        }
        // verify the required parameter 'extension' is set
        if ($extension === null || (is_array($extension) && count($extension) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $extension when calling uploadToDocument'
            );
        }

        $resourcePath = '/_action/document/{documentId}/upload';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($file_name !== null) {
            if('form' === 'form' && is_array($file_name)) {
                foreach($file_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['fileName'] = $file_name;
            }
        }
        // query params
        if ($extension !== null) {
            if('form' === 'form' && is_array($extension)) {
                foreach($extension as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['extension'] = $extension;
            }
        }


        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'documentId' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/octet-stream', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
